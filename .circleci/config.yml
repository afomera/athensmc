# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.4.1-node-browsers
        environment:
          PGHOST: 127.0.0.1
          PGUSER: athensmc
          RAILS_ENV: test
      - image: circleci/postgres:9.4
        environment:
          POSTGRES_USER: athensmc
          POSTGRES_DB: athensmc_test
          POSTGRES_PASSWORD: ""
      - image: circleci/elasticsearch
      - image: circleci/redis
    working_directory: ~/athensmc

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - gem-cache-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-{{ .Branch }}
            - gem-cache
            - npm-deps-{{ .Branch }}-{{ checksum "package.json" }}
            - npm-deps-{{ checksum "package.json" }}
            - npm-deps

      - run:
          name: copy secrets file
          command: |
            cp config/secrets.yml.ci config/secrets.yml
      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle
            yarn install
      - save_cache:
          key: gem-cache-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - save_cache:
          key: gem-cache-{{ .Branch }}
          paths:
            - vendor/bundle

      - save_cache:
          key: gem-cache
          paths:
            - vendor/bundle

      - save_cache:
          key: npm-deps-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - .node_modules

      - save_cache:
          key: npm-deps-{{ checksum "package.json" }}
          paths:
            - .node_modules

      - save_cache:
          key: npm-deps
          paths:
            - .node_modules

      # Database setup
      - run: bundle exec rails db:create
      - run: bundle exec rails db:schema:load

      - run:
          name: Wait for redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            bundle exec rails test

      - run:
        name: run tests
        command: bundle exec rails test:system

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: system-test-result
